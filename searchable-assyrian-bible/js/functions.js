function loadResults(searchQuery, PAGINATE_AMT) {
  let isFirstResult = searchQuery.i === 0;
  let attemptCaption = searchQuery.i === 0;

  searchQuery.results.slice(searchQuery.i, searchQuery.i + PAGINATE_AMT).forEach((result) => {
    // console.log(result.refIndex);
    // if (result.refIndex !== 1904) {
    //   // testing '‹ò‹ø' occurring twice in same word, resulting in appending numerous
    //   // console.log('hello');
    //   return;
    // }
    // if (result.refIndex !== 4907) {
    //   // testing unvocalized '‹ê' being highlighted in numerous places
    //   // console.log('hello');
    //   return;
    // }
    // console.log(isFirstResult);
    // console.log(result);

    const aiiFragment = $('<div/>', { class: 'aii-verse' });
    let aiiHighlightedFragment;
    const trFragment = $('<div/>', { class: 'aii-tr' });
    let trHighlightedFragment;
    const engFragment = $('<div/>', { class: 'eng-verse' });
    let engHighlightedFragment;

    const DEBUG_HIGHLIGHT = false;
    if (DEBUG_HIGHLIGHT === false) {
      result.matches.forEach((match) => {
        if (match.key === 'tr') {
          trHighlightedFragment = highlightEngIndices(result.item.tr, match.indices);
        } else if (match.key === 'eng') {
          engHighlightedFragment = highlightEngIndices(result.item.eng, match.indices);
        } else if (match.key === 'aii' || match.key === 'aii_strip') {
          const re = match.key === 'aii' ? wordRegexAiiV(searchQuery.aii_v_query) : wordRegexAiiNotV(searchQuery.aii_not_v_query);

          aiiHighlightedFragment = regexHighlight(result.item.aii, re, 'highlighted');

          const paddedAii = padAiiV(result.item.aii, re);
          const paddedTr = aiiTranslit(paddedAii).phonetic;
          trHighlightedFragment = highlightPaddedTr(paddedTr);
        }
      });
    }

    if (aiiHighlightedFragment === undefined) {
      aiiFragment.text(result.item.aii);
    } else {
      aiiFragment.append(aiiHighlightedFragment);
    }

    if (isFirstResult) {
      if (trHighlightedFragment !== undefined) {
        trFragment.append(
          $('<div/>').append(trHighlightedFragment),
        );
      } else {
        trFragment.append($('<div/>', { text: result.item.tr }));
      }
      trFragment.append(
        $('<div/>', { class: 'tr-backlink-container' }).append(
          $('<span/>', { class: 'webapp-backlink-meta', text: '^ generated by üß† ' }),
          $('<a/>', { class: 'webapp-backlink-href', href: '../assyrian-transliterator/', text: 'Assyrian Transliterator' }),
        ),
      );
      isFirstResult = false;
    } else if (trHighlightedFragment === undefined) {
      trFragment.text(result.item.tr);
    } else {
      trFragment.append(trHighlightedFragment);
    }

    if (result.item.eng === null) {
      engFragment.addClass('missing-verse');
    } else if (engHighlightedFragment === undefined) {
      engFragment.text(result.item.eng);
    } else {
      engFragment.append(
        engHighlightedFragment,
      );
    }
    if (attemptCaption && result.item.eng !== null) {
      attemptCaption = false;

      engFragment.wrapInner('<div>').append(
        $('<div/>', {
          class: 'translation-caption',
          text: '^ not a word-for-word english translation of the assyrian bible',
        }),
      );
    }

    $('#search-results').append(
      $('<div/>', { class: 'search-result' }).append(
        $('<div/>', { class: 'verse-meta' }).append(
          $('<a/>', {
            text: `${bookDisplayName[result.item.book][1]} ${result.item.chapter}‚Äè:${result.item.verse}`,
            href: `../assyrian-bible/?book=${result.item.book}&chapter=${result.item.chapter}:${result.item.verse}`,
          }),
        ),
        aiiFragment,
        trFragment,
        engFragment,
      ),
    );
    // console.log(result.item);
  });

  // eslint-disable-next-line no-param-reassign
  searchQuery.i += PAGINATE_AMT;
}
