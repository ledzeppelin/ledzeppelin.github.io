function poemToHTML(poem, aiiReplacements, aiiReplacementsForTR) {
  const poemFrag = $(document.createDocumentFragment());

  poem.forEach((section, i) => {
    poemFrag.append(
      $('<div/>', { class: 'section-title' }).append(
        $('<div/>', { class: 'aii', text: section.title }),
        $('<div/>', { class: 'aii-tr', text: aiiTranslit(section.title).phonetic }),
        i === 0 ? $('<div/>', { class: 'tr-backlink-container' }).append(
          $('<span/>', { class: 'webapp-backlink-meta', text: '^ generated by ðŸŸ  ' }),
          $('<a/>', { class: 'webapp-backlink-href', text: 'assyrian transliterator', href: '../assyrian-transliterator/' }),
        ) : '',
        $('<div/>', { class: 'eng', text: section.title_translation }),
      ),
    );

    const sectionLinesHTML = $('<ul/>', { class: 'section-lines' });
    section.lines.forEach((line) => {
      const aii = aiiReplacements[line.aii] || line.aii;
      const aiiForTR = aiiReplacementsForTR[line.aii] || aii;

      sectionLinesHTML.append(
        $('<li/>', { class: 'section-line' }).append(
          $('<div/>', { class: 'aii', text: aii }),
          $('<div/>', { class: 'aii-tr', text: aiiTranslit(aiiForTR).phonetic }),
          $('<div/>', { class: 'eng', text: line.eng }),
        ),
      );
    });

    poemFrag.append(sectionLinesHTML);
  });
  return poemFrag;
}

// from chatgpt 4
function findLastIndexSmallerThan(startTimes, currentTime) {
  let left = 0;
  let right = startTimes.length - 1;
  let result = -1;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    if (startTimes[mid] < currentTime) {
      result = mid;
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }

  return result;
}

// from chatgpt 4
function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);

  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

function generateStartTimes(poemTranslation) {
  const startTimes = poemTranslation.flatMap((verse) => verse.lines.map((line) => line.start));
  return startTimes;
}

// this allows us to run code in a Node context and also browser-side js
if (typeof module === 'object') {
  module.exports = {
    findLastIndexSmallerThan,
    generateStartTimes,
  };
}
